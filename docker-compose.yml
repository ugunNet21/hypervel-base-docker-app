version: '3.8'

services:
  # Service for the Hypervel application
  app:
    # Use the official Hyperf/Hypervel image with a specific PHP and Swoole version
    # Choose the image tag that matches your PHP version (e.g., 8.3) and desired Swoole version
    # The alpine variant is generally smaller and recommended for production
    image: hyperf/hyperf:8.3-alpine-v3.19-swoole-v6
    # Use the hyperf/hyperf:8.3-alpine-v3.19-swoole-v6 image as suggested in the documentation.
    # Ensure this matches your PHP version and Swoole requirements.

    # Map the current directory (your Hypervel project root) to the project directory in the container
    # This allows you to edit code on your host machine and have it reflected in the container
    volumes:
      - .:/data/project
      # If you are on a system with SELinux enabled and encounter permission issues,
      # you might need to add `:Z` or `:z` to the volume mount, e.g., `.:/data/project:Z`
      # Or add the `--privileged -u root` flags as mentioned in the documentation,
      # though using volumes with proper permissions is generally preferred.

    # Expose the port Hypervel listens on (default is 9501)
    ports:
      - "9501:9501"
      # Map host port 9501 to container port 9501

    # Set the working directory inside the container
    working_dir: /data/project

    # Command to run when the container starts
    # This starts the Hypervel development server with hot-reloading enabled
    # For production, you might use `php artisan start` or a different command
    command: sh -c "composer install && php artisan watch"
    # `composer install` ensures dependencies are installed inside the container
    # `php artisan watch` starts the server with hot-reload for development

    # Environment variables (optional, can be read from .env file automatically by Hypervel)
    # You can explicitly set variables here if needed, but relying on the .env file is standard.
    # env_file:
    #   - .env

    # Uncomment the lines below to link the app service to a database service
    # depends_on:
    #   - db # Link to the database service defined below

  # # Example MySQL Database Service (Uncomment to use)
  # db:
  #   image: mysql:8.0 # Use an official MySQL image
  #   ports:
  #     - "3306:3306" # Map host port 3306 to container port 3306
  #   environment:
  #     MYSQL_ROOT_PASSWORD: your_root_password # !! Change this in production !!
  #     MYSQL_DATABASE: hypervel # Database name
  #     MYSQL_USER: hypervel # Database user
  #     MYSQL_PASSWORD: secret # !! Change this in production !!
  #   volumes:
  #     - dbdata:/var/lib/mysql # Persist database data

  # # Example PostgreSQL Database Service (Uncomment to use)
  # db:
  #   image: postgres:13 # Use an official PostgreSQL image
  #   ports:
  #     - "5432:5432" # Map host port 5432 to container port 5432
  #   environment:
  #     POSTGRES_DB: hypervel # Database name
  #     POSTGRES_USER: hypervel # Database user
  #     POSTGRES_PASSWORD: secret # !! Change this in production !!
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data # Persist database data

# # Define volumes for data persistence (Uncomment if using database services)
# volumes:
#   dbdata: # Volume for MySQL data
#   pgdata: # Volume for PostgreSQL data
